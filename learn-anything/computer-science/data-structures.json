{
  "title": "learn anything - computer science - data structures",
  "nodes": [
    {
      "text": "data structures",
      "note": "",
      "url": "http://www.wikiwand.com/en/Data_structure",
      "fx": -21.651691704110817,
      "fy": -784.6218492744451,
      "category": "wiki"
    },
    {
      "text": "help",
      "url": "",
      "fx": 132.3151593594937,
      "fy": -672.2110775096995
    },
    {
      "text": "basics",
      "url": "",
      "fx": 9.509712837838606,
      "fy": -570.7110430743252
    },
    {
      "text": "disjoint sets  ️",
      "url": "/computer-science/data-structures/disjoint-sets",
      "fx": -887.1788383152174,
      "fy": -501.7973845108695,
      "category": "mindmap"
    },
    {
      "text": "arrays  ️",
      "url": "/computer-science/data-structures/arrays",
      "fx": -905.8769351546116,
      "fy": -386.3429312375182,
      "category": "mindmap"
    },
    {
      "text": "binary heaps  ️",
      "url": "/computer-science/data-structures/binary-heaps",
      "fx": 504.68657483552397,
      "fy": -379.2857730263164,
      "category": "mindmap"
    },
    {
      "text": "heaps  ️",
      "url": "/computer-science/data-structures/heaps",
      "fx": 283.20855614973425,
      "fy": -375.8983957219252,
      "category": "mindmap"
    },
    {
      "text": "bloom filter",
      "url": "http://www.wikiwand.com/en/Bloom_filter",
      "fx": -979.808708639706,
      "fy": -280.363166360294,
      "category": "wiki"
    },
    {
      "text": "stack  ️",
      "url": "/computer-science/data-structures/stack",
      "fx": 322.33470875873377,
      "fy": -276.4976379946751,
      "category": "mindmap"
    },
    {
      "text": "serialisation  ️",
      "url": "/computer-science/data-structures/serialisation",
      "fx": -524.3088353913074,
      "fy": -262.5840053041354,
      "category": "mindmap"
    },
    {
      "text": "conflict-free replicated data type",
      "url": "http://www.wikiwand.com/en/Conflict-free_replicated_data_type",
      "fx": -289.44924729535364,
      "fy": -204.38273714026627,
      "category": "wiki"
    },
    {
      "text": "self balancing binary search tree",
      "url": "http://www.wikiwand.com/en/Self-balancing_binary_search_tree",
      "fx": -906.2973758012841,
      "fy": -180.6203926282053,
      "category": "wiki"
    },
    {
      "text": "linked list  ️",
      "url": "/computer-science/data-structures/linked-lists",
      "fx": 280.7795517988054,
      "fy": -165.11773950447207,
      "category": "mindmap"
    },
    {
      "text": "trees",
      "url": "http://www.wikiwand.com/en/Tree_(data_structure)",
      "fx": -424.15625,
      "fy": -104.37799549102783,
      "category": "wiki"
    },
    {
      "text": "hash tables  ️",
      "note": "a hash function is any function that can be used to map data of arbitrary size to data of fixed size  the values returned by a hash function are called hash values, hash codes, digests or simply hashes  one use is a data structure called a hash table, widely used in computer software for rapid data lookup",
      "url": "/computer-science/data-structures/hash-tables",
      "fx": -66.16053381363918,
      "fy": -63.87630990227785,
      "category": "mindmap"
    },
    {
      "text": "queues",
      "url": "http://www.wikiwand.com/en/Queue_(abstract_data_type)",
      "fx": 169.873693452829,
      "fy": -59.62684513566683,
      "category": "wiki"
    },
    {
      "text": "log-structured merge-tree",
      "url": "http://www.wikiwand.com/en/Log-structured_merge-tree",
      "fx": -555.3125,
      "fy": 25.81001377105713,
      "category": "wiki"
    },
    {
      "text": "binary search trees  ️",
      "url": "/computer-science/data-structures/binary-search-trees",
      "fx": -821.8800659179688,
      "fy": 27.9573917388916,
      "category": "mindmap"
    },
    {
      "text": "tries  ️",
      "url": "/computer-science/data-structures/tries",
      "fx": -221.5940933227539,
      "fy": 28.557376861572266,
      "category": "mindmap"
    },
    {
      "text": "priority queue  ️",
      "url": "/computer-science/data-structures/priority-queue",
      "fx": 140.78483797898934,
      "fy": 83.76641857090294,
      "category": "mindmap"
    },
    {
      "text": "quadtrees  ️",
      "url": "/computer-science/data-structures/quadtree",
      "fx": -247.02221488965677,
      "fy": 149.5933428930009,
      "category": "mindmap"
    },
    {
      "text": "red-black tree  ️",
      "url": "/computer-science/data-structures/red-black-trees",
      "fx": -799.6791930379746,
      "fy": 165.8639240506326,
      "category": "mindmap"
    }
  ],
  "subnodes": [
    {
      "text": "some data structures",
      "url": "https://github.com/voxsim/knowledge/tree/master/computer-science/data-structures",
      "fx": 273.3151397705078,
      "fy": -719.1449890136719,
      "category": "github",
      "color": "rgba(104, 255, 109, 1.0)",
      "parent": "help"
    },
    {
      "text": "best online video courses for data structures and algorithms  ️",
      "url": "https://www.techiedelight.com/best-online-courses-data-structures-algorithms/",
      "fx": 273.31517028808594,
      "fy": -679.015251159668,
      "category": "article",
      "color": "rgba(0, 224, 161, 1.0)",
      "parent": "help"
    },
    {
      "text": "1. Data structures by Bereley uni",
      "url": "https://www.youtube.com/watch?v=QMV45tHCYNI&amp;list=PL4BBB74C7D2A1049C",
      "fx": 172.50971221923828,
      "fy": -588.9015731811523,
      "category": "",
      "color": "rgba(104, 255, 109, 1.0)",
      "parent": "basics"
    },
    {
      "text": "2. 10 common data structures explained  ️",
      "url": "https://medium.freecodecamp.org/10-common-data-structures-explained-with-videos-exercises-aaff6c06fb2b",
      "fx": 172.50972366333008,
      "fy": -523.7831649780273,
      "category": "article",
      "color": "rgba(0, 224, 161, 1.0)",
      "parent": "basics"
    },
    {
      "text": "3. Visual Representation of Algorithms & Data Structures",
      "url": "https://visualgo.net/en",
      "fx": 172.50972366333008,
      "fy": -470.7831649780273,
      "category": "",
      "color": "rgba(0, 224, 161, 1.0)",
      "parent": "basics"
    }
  ],
  "connections": [
    {
      "source": "trees",
      "target": "log-structured merge-tree",
      "curve": {
        "x": -18.5779,
        "y": 65.094
      }
    },
    {
      "source": "help",
      "target": "data structures",
      "curve": {
        "x": -38.9834,
        "y": -54.9554
      }
    },
    {
      "source": "data structures",
      "target": "basics",
      "curve": {
        "x": -17.6693,
        "y": 105.705
      }
    },
    {
      "source": "basics",
      "target": "trees",
      "curve": {
        "x": -312.569,
        "y": 226.023
      }
    },
    {
      "source": "basics",
      "target": "conflict-free replicated data type",
      "curve": {
        "x": -91.4794,
        "y": 190.664
      }
    },
    {
      "source": "basics",
      "target": "hash tables  ️",
      "curve": {
        "x": 2.8894,
        "y": 266.638
      }
    },
    {
      "source": "basics",
      "target": "serialisation  ️",
      "curve": {
        "x": -247.909,
        "y": 155.313
      }
    },
    {
      "source": "basics",
      "target": "self balancing binary search tree",
      "curve": {
        "x": -492.724,
        "y": 188.4
      }
    },
    {
      "source": "basics",
      "target": "bloom filter",
      "curve": {
        "x": -530.038,
        "y": 130.783
      }
    },
    {
      "source": "basics",
      "target": "linked list  ️",
      "curve": {
        "x": 136.796,
        "y": 228.555
      }
    },
    {
      "source": "basics",
      "target": "arrays  ️",
      "curve": {
        "x": -458.444,
        "y": 92.184
      }
    },
    {
      "source": "trees",
      "target": "binary search trees  ️",
      "curve": {
        "x": -189.194,
        "y": 39.4748
      }
    },
    {
      "source": "binary search trees  ️",
      "target": "red-black tree  ️",
      "curve": {
        "x": -7.39958,
        "y": 67.7033
      }
    },
    {
      "source": "trees",
      "target": "tries  ️",
      "curve": {
        "x": 112.508,
        "y": 58.915
      }
    },
    {
      "source": "tries  ️",
      "target": "quadtrees  ️",
      "curve": {
        "x": 5.28593,
        "y": 61.768
      }
    },
    {
      "source": "basics",
      "target": "stack  ️",
      "curve": {
        "x": 136.505,
        "y": 161.634
      }
    },
    {
      "source": "basics",
      "target": "queues",
      "curve": {
        "x": 87.682,
        "y": 256.292
      }
    },
    {
      "source": "queues",
      "target": "priority queue  ️",
      "curve": {
        "x": 3.45557,
        "y": 71.6966
      }
    },
    {
      "source": "basics",
      "target": "disjoint sets  ️",
      "curve": {
        "x": -436.845,
        "y": 34.4568
      }
    },
    {
      "source": "basics",
      "target": "heaps  ️",
      "curve": {
        "x": 113.053,
        "y": 115.952
      }
    },
    {
      "source": "heaps  ️",
      "target": "binary heaps  ️",
      "curve": {
        "x": 119.489,
        "y": -2.44369
      }
    }
  ]
}
